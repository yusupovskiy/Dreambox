<script type="text/javascript">
  Vue.component('add-record', {
    data: function () {
      return {
        loading: false,

        selectSearch: '',
        recordId: '',
        note: null,

        sellSubscription: false,
        startSubs: '',
        finishSubs: '',
        bookingDate: '',

        showPanelRecalculate: false,
        priceRecalculate: null,
        noteRecalculate: '',

        addDiscountPanel: false,
        startDiscount: '',
        finishDiscount: '',
        amountDiscount: null,
        noteDiscount: '',
      }
    },
    props: {
      person: Object,
      clients: Array,
      records: Array,
      recordsClients: Array,
    },
    methods: {
      createElement() {
        const { person, recordId, sellSubscription } = this,
              { recordsClients } = data,
              recordClient = recordsClients.find(rc => rc.id === recordId && rc.client_id === person.id),
              presentRecordClient = recordClient !== undefined && recordClient.is_active;

        // if(!this.loading) {
        //   this.loading = true;

          setTimeout(() => {

            if(!presentRecordClient) {
              $.ajax('/records_clients.json', {
                method: 'POST',
                data: {
                  authenticity_token: authToken,
                  record_client: {
                    record_id: recordId,
                    client_id: person.id,
                  }
                },
                success: messege => {
                  const complited = messege.complited
                  vmNotifications.notifications.unshift(messege);

                  if(complited) {
                    const newRecordClient = messege.result, 
                          indexCurrentRecord = recordsClients.findIndex(rs => rs.id == recordId && rs.client_id == person.id);

                    indexCurrentRecord < 0 ? recordsClients.unshift(newRecordClient) : recordsClients.splice(indexCurrentRecord, 1, newRecordClient);

                    this.createSubClient();
                    this.createDiscount(newRecordClient.record_client_id);
                    vmPanelsAdd.panelAddCategory = null;
                  }
                  // this.loading = false;
                },
                error: e => console.warn('error', e)
              });  
            } 

            else {
              this.createSubClient();
              this.createDiscount(recordClient.record_client_id);
            }
          }, 600);
        // }
      },
      createSubClient() {
        if(this.sellSubscription) {
          const { subscriptions, operations } = data,
                { person, startSubs, finishSubs, recordsClient, recordId, priceRecalculate, noteRecalculate } = this;

          $.ajax('/subscriptions.json', {
            method: 'POST',
            data: {
              authenticity_token: authToken,
              record_id: recordId,
              client_id: person.id,
              price: priceRecalculate,
              note_recalculate: noteRecalculate,
              subscription: {
                start_at: startSubs,
                finish_at: finishSubs,
              }
            },
            success: messege => {
              const complited = messege.complited;
              vmNotifications.notifications.unshift(messege);

              if(complited) {
                let newSubscription = messege.result;
                const newOperation = messege.operation,
                      recordClient = recordsClient.find(rc => rc.record_client_id == newSubscription.record_client_id);

                newSubscription = Object.assign(newSubscription, {
                  total_amount: 0, 
                  name: recordClient.name,
                  record_id: recordClient.id,
                  client_id: person.id
                });

                subscriptions.unshift(newSubscription);
                operations.unshift(newOperation);
                this.getDateSub();
              }
            },
            error: e => console.warn('error', e),
          });
        }
      },
      createDiscount(recordClientId) {
        if(this.addDiscountPanel) {
          let   { discounts } = data;
          const { startDiscount, finishDiscount, amountDiscount, noteDiscount } = this;

          $.ajax('/discounts.json', {
            method: 'POST',
            data: {
              authenticity_token: authToken,
              discount: {
                record_client_id: recordClientId,
                value: amountDiscount,
                start_at: startDiscount,
                finish_at: finishDiscount,
                note: noteDiscount,
              }
            },
            success: messege => {
              const complited = messege.complited;
              vmNotifications.notifications.unshift(messege);

              if(complited) {
                const newDiscount = messege.result;

                this.startDiscount = '';
                this.finishDiscount = '';
                this.amountDiscount = null;
                this.noteDiscount = '';
                discounts.unshift(newDiscount);
              }
            },
            error: e => console.warn('error', e),
          });
        }
      },

      getDateSub() {
        if(this.sellSubscription) {
          const { recordId, person } = this;

          if(recordId != '' && recordId != 0) {
            $.get('/get_autodata_subscription.json', { client_id: person.id, record_id: recordId },
              dateSub => {
                this.startSubs = dateSub.start_date;
                this.finishSubs = dateSub.finish_date;
                this.bookingDate = dateSub.booking_date;
              }
            );
          }
        }
      },

      closePanelAddDiscount() {
        this.addDiscountPanel = !this.addDiscountPanel;

      },
      closePanelSellSubscription() {
        this.sellSubscription = !this.sellSubscription;

      },
    },
    watch: {
      recordId: function() {
        if(this.recordId === '') {
          this.startSubs = '';
          this.finishSubs = '';
          this.bookingDate = '';
        }
        else {
          this.getDateSub();
        }
      },
      sellSubscription: function() {
        if(this.recordId !== '') {
          this.getDateSub();
        }
      },
    },
    computed: {
      recordsFilter: function() {
        const { discounts } = data,
              { recordsClientsServices } = vmPanelsAdd,
              { person, records, recordsClients } = this,
              recordsClient = recordsClients.filter(r => r.client_id === person.id);

        const recordsStatus = records.filter(r => {
          const recordClient = recordsClient.find(rc => rc.id === r.id),
                record = recordsClientsServices.find(rcs => rcs.id === r.id),
                amount_subscription = record.amount_subscription,
                discount = discounts.find(d => recordClient !== undefined && d.record_client_id === recordClient.record_client_id);

          return Object.assign(r, {
            status: (recordClient !== undefined && recordClient.is_active) ? 'Записан' : 'Не записан',
            amount_subscription: discount !== undefined ? discount.value : amount_subscription,
          });
        });

        const k = 'status';
        return recordsStatus.sort((a, b) => (a[k] < b[k] ? -1 : a[k] > b[k] ? 1 : 0) * [1, -1][+false]);
      },
      recordsClient() {
        let {recordsClients, person, records} = this;

        return recordsClients.filter(function (rc) {
          if(rc.client_id == person.id && rc.is_active == true) {
            var discounts = vmClient.discounts.filter(function(d) {
              var currentDate = new Date();
              var start_date = new Date(d.start_at);
              var finish_date = new Date(d.finish_at);

              if(d.record_client_id == rc.record_client_id && d.is_active == true && start_date <= currentDate && currentDate <= finish_date) {
                return d;
              }
            });

            if(discounts.length > 0) {
              var total_price_abon = discounts[0].value;
            }
            else {
              let indexRecord = records.findIndex(r => r.id == rc.id);
              var total_price_abon = records[indexRecord].total_price_abon;
            }

            return Object.assign(rc, {total_price_abon: total_price_abon});
          }
        });
      },
    },
    template: `
      <div class="pnl-add1">

        <div class="add-input">
          <div class="item-add-input">
            <div class="left-item-add-input">Запись</div>
            <div class="right-item-add-input">
              <select v-model="recordId" class="input-right-item-add-input">
                <option value="">Пусто</option>
                <option v-for="r in recordsFilter" :value="r.id">
                  {{ r.name }} | {{ r.amount_subscription }} ₽ — [{{ r.status }}]
                </option>
              </select>
            </div>
          </div>

          <div class="dop">
            <span :class="[{ active: sellSubscription }]" @click="closePanelSellSubscription()" class="item-dop">Продать абонемент</span>
            <span :class="[{ active: addDiscountPanel }]" @click="closePanelAddDiscount()" class="item-dop">Добавить скидку</span>
          </div>

          <div v-if="sellSubscription">
            <div class="head-input">Продажа абонемента</div>

            <div class="item-add-input">
              <div class="left-item-add-input">Дата начала</div>
              <div class="right-item-add-input">
                <input placeholder="Пусто" type="date" class="input-right-item-add-input" v-model='startSubs' />
              </div>
            </div>
            <div class="item-add-input">
              <div class="left-item-add-input">Дата завершения</div>
              <div class="right-item-add-input">
                <input placeholder="Пусто" type="date" class="input-right-item-add-input" v-model='finishSubs' />
              </div>
            </div>
            <div v-if="bookingDate !== ''" style="margin-top: 10px; font-size: 14px;">{{ bookingDate }}</div>

            <div v-if="showPanelRecalculate">
              <div class="item-add-input">
                <div class="left-item-add-input">Цена</div>
                <div class="right-item-add-input">
                  <input placeholder="Пусто" type="number" class="input-right-item-add-input" v-model='priceRecalculate' />
                </div>
              </div>
              <div class="item-add-input">
                <div class="left-item-add-input">Комментарий</div>
                <div class="right-item-add-input">
                  <input placeholder="Пусто" type="text" class="input-right-item-add-input" v-model='noteRecalculate' />
                </div>
              </div>
            </div>

            <div class="dop">
              <span :class="[{ active: showPanelRecalculate }]" @click="showPanelRecalculate = !showPanelRecalculate" class="item-dop">Пересчитать</span>
            </div>
          </div>

          <div v-if="addDiscountPanel">
            <div class="head-input">Добавление скидки</div>

            <div class="item-add-input">
              <div class="left-item-add-input">Дата начала</div>
              <div class="right-item-add-input">
                <input placeholder="Пусто" type="date" class="input-right-item-add-input" v-model='startDiscount' />
              </div>
            </div>
            <div class="item-add-input">
              <div class="left-item-add-input">Дата завершения</div>
              <div class="right-item-add-input">
                <input placeholder="Пусто" type="date" class="input-right-item-add-input" v-model='finishDiscount' />
              </div>
            </div>
            <div class="item-add-input">
              <div class="left-item-add-input">Сумма</div>
              <div class="right-item-add-input">
                <input placeholder="Пусто" type="number" class="input-right-item-add-input" v-model='amountDiscount' />
              </div>
            </div>
            <div class="item-add-input">
              <div class="left-item-add-input">Комментарий</div>
              <div class="right-item-add-input">
                <input placeholder="Пусто" type="text" class="input-right-item-add-input" v-model='noteDiscount' />
              </div>
            </div>
          </div>
        </div>

        <div class='btns-pnls-add'>
          <button @click='createElement()' class='btn-pnls-add'>Добавить</button>
          <button @click="$emit('cancel-panel')" class='btn-pnls-cancel'>Назад</button>
        </div>
      </div>
    `
  });
</script>
