<%= render 'layouts/panels_add_tree_categories' %>

<script type="text/javascript">
  Vue.component('add-transaction', {
    data: function () {
      return {
        newElement: [],
        loading: false,
        note: '',
        amount: null,
        date: '',
        affiliate_id: '',
        selectSearch: '',
        showSelect: false,
        affiliateId: '',
        unpaidOperationId: '',
        maxAmount: null,
        operation: '',
        log: {},
      }
    },
    props: {
      panelAddCategory: String,
      arrTree: Array,
      affiliates: Array,
      people: Array,
      person: Object,
      categoryId: Number,
      unpaidSubscriptionClient: String,
    },
    methods: {
      currentDate() {
        let currentDate = new Date();

        this.date = setDate(currentDate.getDate(), currentDate.getMonth(), currentDate.getFullYear());
      },
      parseDate(start, finish) {
        return startAndEndDateInWords('за ', start, ' до ', finish, false);
      },
      clickPerson(person) {
        this.selectSearch = '';
        this.showSelect = false;
        vmPanelsAdd.person = person;
        this.unpaidOperationId = '';
      },
      openSelect() {
        this.showSelect = true;
        if(vmPanelsAdd.person.id !== undefined) {
          this.selectSearch = vmPanelsAdd.person.last_name + ' ' + vmPanelsAdd.person.first_name;
        }
      },
      closeSelect() {
        this.selectSearch = '';
      },
      hideSelect() {
        this.showSelect = false;
      },
      deletePerson() {
        vmPanelsAdd.person = {};
        this.unpaidOperationId = '';
      },
      createTransaction() {
        let {person} = vmPanelsAdd;
        let {amount, note, categoryId, date, affiliateId, newElement, unpaidOperationId, log, operation} = this;
        let complited = false;

        if(!this.loading) {
          this.loading = true;

          setTimeout(() => {
            $.ajax('/create_transaction.json', {
              method: 'POST',
              data: {
                authenticity_token: authToken,
                client_operation_id: person.operation_id,
                unpaid_operation_id: unpaidOperationId,
                amount: amount,
                note: note,
                category_id: categoryId,
                affiliate_id: affiliateId,
                date: date,
              },
              success: messege => {
                complited = messege.complited;
                newElement = messege.result[0];
                log = messege.log;
                operation = messege.operation;
                vmNotifications.notifications.unshift(messege);
              },
              error: e => console.warn('error', e)
            }).done(e => {
              if(complited) {
                vmPanelsAdd.categoryId = null;
                this.affiliateId = '';
                vmPanelsAdd.panelAddCategory = null;

                if(operation === 'reminder' || operation === 'reminder_completed') {
                  data.logs.unshift(log);
                }
                if(operation === 'reminder_completed') {
                  const indexReminder = data.reminders.findIndex(r => r.operation_id === unpaidOperationId);
                  data.reminders[indexReminder].completed = true;
                }

                data.transactions.unshift(newElement);
                window.open('/transactions/' + newElement.id + '/doc_pko', '_blank');
              }
              this.loading = false;
            });
          }, 600);
        }
      },
    },
    watch: {
      unpaidOperationId: function() {
        const { recordsClientsServices } = vmPanelsAdd;
        const { 
          unpaidSubscriptionsClient, 
          remindersWithPaymentsPerson, 
          unpaidOperationId } = this, 
          presentOperationId = String(unpaidOperationId).length > 0;

        if(presentOperationId) {
          const sub = unpaidSubscriptionsClient.find(s => s.operation_id === unpaidOperationId);
          const rem = remindersWithPaymentsPerson.find(r => r.operation_id === unpaidOperationId);

          if(sub !== undefined) {
            const record = recordsClientsServices.find(rcs => rcs.records_clients_ids.find(rci => rci === sub.record_client_id) !== undefined);
            const servicesName = String(record.services_name);
            const nameForNote = servicesName !== '' ? servicesName : record.name;

            this.amount = sub.debt;
            this.maxAmount = sub.debt;
            this.note = startAndEndDateInWords('За ', sub.start_at, ' до ', sub.finish_at, true) + ', абонемент ' + nameForNote;
          }
          else if(rem !== undefined) {
            this.amount = rem.unpaid_debt;
            this.maxAmount = rem.unpaid_debt;
            this.note = rem.note;
          }
          else {
            this.amount = null;
            this.maxAmount = null;
            this.note = '';
          }
        }
        else {
          this.amount = null;
          this.maxAmount = null;
          this.note = '';
        }
      },
      amount: function() {
        if(this.maxAmount !== null && this.maxAmount <= this.amount) {
          this.amount = this.maxAmount;
        }
      },
    },
    created() {
      this.unpaidOperationId = this.unpaidSubscriptionClient;
    },
    computed: {
      subscriptionsAmount() {
        let { subscriptions, transactions, operations } = data;

        return subscriptions.filter(s => {
          let payment = transactions.reduce((sum, t) => {
            return (t.operation_id === s.operation_id && t.is_active && t.budget === 'income') ? sum + t.amount : sum;
          }, 0);
          let client_id = operations.find(o => o.id === s.operation_id).client_id;

          // console.log(s);
          return Object.assign(s, { 
            payment: payment, 
            debt: s.price - payment, 
            client_id: client_id 
          });
        });
      },
      unpaidSubscriptionsClient() {
        let { subscriptionsAmount } = this;
        let { person, recordsClientsServices } = vmPanelsAdd;

        return subscriptionsAmount.filter(function (s) {
          if (s.is_active && person.id === s.client_id && s.debt > 0) {
            const record = recordsClientsServices.find(rcs => rcs.records_clients_ids.find(rci => rci === s.record_client_id) !== undefined);

            return Object.assign(s, { services_name: String(record.services_name), record_name: record.name });
          }
        });
      },
      remindersWithPaymentsPerson() {
        let { reminders, transactions } = data;
        let { person } = vmPanelsAdd;

        return reminders.filter(r => {
          if (!r.completed && person.id === r.client_id && r.debt > 0) {
            let payment = transactions.reduce((sum, t) => {
              return (t.operation_id === r.operation_id && t.is_active) ? sum + t.amount : sum;
            }, 0);

            return Object.assign(r, { 
              payment: payment, 
              unpaid_debt: r.debt - payment,
            });
          }
        });
      },
      isCurrentDate() {
        let newCurrentDate = new Date();
        let currentDate = setDate(newCurrentDate.getDate(), newCurrentDate.getMonth(), newCurrentDate.getFullYear());

        return this.date === currentDate;
      },
      peopleSearch() {
        const s = validSpaces(this.selectSearch.toLowerCase());
        return this.people.filter(n => {
          let full_name = n.last_name + ' ' + n.first_name + ' ' + n.patronymic;

          return Object.values(full_name.split()).some(m => m.toString().toLowerCase().includes(s));
          }
        );
      },
    },
    template: `
      <div class="pnl-add1">
        <input v-model='amount' type="number" class="whsOnd zHQkBf" autocomplete="off" tabindex="0" placeholder="Сумма" autofocus="" data-initial-value="" badinput="false" />

        <div v-if="!isCurrentDate" class="dop">
          <span @click="currentDate()" class="item-dop">Сегодня</span>
        </div>

        <tree :arr-tree="arrTree"></tree>

        <div class="add-input">

          <div class="item-add-input">
            <div class="left-item-add-input">Сторона</div>
            <div class="right-item-add-input">

              <input v-model="selectSearch" type="text" class="input-right-item-add-input" style="position: relative; z-index: 99; background-color: transparent;"  @focus="openSelect" :class="[{ active: showSelect }]" />

              <div v-if="selectSearch.length > 0" @click="closeSelect" class="close-select"><ion-icon name="close-circle"></ion-icon></ion-icon></div>

              <div v-else-if="showSelect" @click="hideSelect" class="close-select"><ion-icon name="close-circle"></ion-icon></ion-icon></div>

              <div v-else-if="person.id !== undefined" @click="deletePerson" class="close-select"><ion-icon name="close-circle"></ion-icon></ion-icon></div>

              <div v-if="!showSelect && person.id !== undefined" class="item-v" :title="person.patronymic">
                <img src="/resources/no-image-available.png">
                <div>{{ person.last_name }} {{ person.first_name }}</div>
              </div>
              <div v-else-if="showSelect || (selectSearch.length <= 0 && person.id === undefined)" class="emptily">Пусто</div>

              <div v-if="showSelect" class="select-list cool-scrollbar">
                <div class="scroll-select-list">
                  <div v-if="peopleSearch.length > 0">
                    <div @click="clickPerson(client)" v-for="client in peopleSearch" :title="client.patronymic" class="item-s">
                      <img src="/resources/no-image-available.png">
                      <div>{{ client.last_name }} {{ client.first_name }}</div>
                    </div>
                  </div>
                  <div v-else style="font-size: 14px; padding: 2px 10px; color: #c2c2c2; user-select: none;">Ничего не найдено</div>
                </div>
              </div>

            </div>
          </div>

          <div v-if="person.id !== undefined && (unpaidSubscriptionsClient.length > 0 || remindersWithPaymentsPerson.length > 0)" class="item-add-input">
            <div class="left-item-add-input">Задолжности</div>
            <div class="right-item-add-input">
              <select v-model="unpaidOperationId" class="input-right-item-add-input">
                <option value="">Пусто</option>

                <option v-for="s in unpaidSubscriptionsClient" :value="s.operation_id">
                  {{ s.payment }} из {{ s.price }} ₽ | {{ s.services_name !== '' ? s.services_name : s.record_name }} {{ parseDate(s.start_at, s.finish_at) }}
                </option>

                <option v-for="r in remindersWithPaymentsPerson" :value="r.operation_id">
                  {{ r.payment }} из {{ r.debt }} ₽ | {{ r.note }}
                </option>
              </select>
            </div>
          </div>

          <div class="item-add-input">
            <div class="left-item-add-input">Дата транзакции</div>
            <div class="right-item-add-input">
              <input placeholder="Пусто" type="date" class="input-right-item-add-input" v-model='date' />
            </div>
          </div>

          <div v-if="unpaidOperationId === ''" class="item-add-input">
            <div class="left-item-add-input">Филиал</div>
            <div class="right-item-add-input">
              <select v-model="affiliateId" class="input-right-item-add-input">
                <option value="">Пусто</option>
                <option v-for="affiliate in affiliates" :value="affiliate.id">
                  {{ affiliate.address }}
                </option>
              </select>
            </div>
          </div>

          <div class="item-add-input">
            <div class="left-item-add-input">Комментарий</div>
            <div class="right-item-add-input">
              <textarea placeholder="Пусто" class="input-right-item-add-input" v-model='note'></textarea>
            </div>
          </div>
        </div>

        <div class='btns-pnls-add'>
          <button @click='createTransaction()' class='btn-pnls-add'>Добавить</button>
          <button @click="$emit('cancel-panel')" class='btn-pnls-cancel'>Отмена</button>
        </div>
      </div>
    `
  });
</script>
