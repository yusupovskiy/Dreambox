<div 
  @click='cancelPanels()' 
  v-if='panelAddCategory != null' 
  id='pnls-add' 
  class='pnls-add'>

  <add-transaction
    v-if='panelAddCategory === "transaction"'
    v-on:cancel-panel="panelAddCategory = null"
    :arr-tree="[categoriesTreeIncome, categoriesTreeExpense]"
    :affiliates="affiliates"
    :person="person"
    :people="people"
    :category-id="categoryId"
    :panel-add-category="panelAddCategory"
    :unpaid-subscription-client="unpaidSubscriptionClient"
  ></add-transaction>

  <add-category 
    v-else-if='panelAddCategory === "services"' 
    v-on:cancel-panel="panelAddCategory = null"
    :placeholder='"Название услуги"' 
    :panel-add-category='panelAddCategory' 
    :arr-tree="[services]"
  ></add-category>

  <add-category 
    v-else-if='panelAddCategory === "categories"' 
    v-on:cancel-panel="panelAddCategory = null"
    :placeholder='"Название категории"' 
    :panel-add-category='panelAddCategory' 
    :arr-tree="[categoriesTreeIncome, categoriesTreeExpense]"
  ></add-category>

  <add-reminder
    v-else-if='panelAddCategory === "reminders"' 
    v-on:cancel-panel="panelAddCategory = null"
    :person="person"
    :affiliates="affiliates"
  ></add-reminder>

  <add-record
    v-else-if='panelAddCategory === "records"' 
    v-on:cancel-panel="panelAddCategory = null"
    :person="person"
    :clients="people"
    :affiliates="affiliates"
  ></add-record>
</div>


<%= render 'layouts/panels_add_transaction' %>
<%= render 'layouts/panels_add_categories' %>
<%= render 'layouts/panels_add_reminders' %>
<%= render 'layouts/panels_add_records' %>
<%= render 'layouts/panels_add_select_search' %>
<%= render 'layouts/panels_add_select_records' %>
<%= render 'layouts/panels_add_multi_select' %>

<script type="text/javascript">
  var vmPanelsAdd = new Vue({
    el: '#pnls-add',
    data: {
      panelAddCategory: null,
      categoryId: null,
      budget: '',
      person: {},
      unpaidSubscriptionClient: '',
    },
    methods: {
      cancelPanels() {
        var cancelPanels = $('.pnl-add1');
        $(document).mouseup(function (e) {
          if(!$(e.target).closest(".pnl-add1").length) {
            vmPanelsAdd.panelAddCategory = null;
          }
        });
      },
    },
    watch: {
      panelAddCategory() {
        if(this.panelAddCategory == 'services') {
          this.budget = 'income';
          this.categoryId = 1;
        }
        else {
          this.budget = '';
          this.categoryId = null;
        }
      },
    },
    computed: {
      services() {
        var categories = vmPanelsAdd.categories.filter(c => c.budget == 'income');

        return {
          value: { name: 'Доход', id: 0, budget: 'income' },
          children: buildHierarchy(categories)
        }.children[0]
      },
      servicesCompany() {
        let { categories } = data;
        var services = [];
        var find_children = function(level) {
          var services_children = categories.filter(c => c.level == level);
          var id_categories_array = []

          if(!services_children.length > 0) {
            return false
          }

          services_children.filter(function(i) {
            id_categories_array.push(i.id)
          });

          services = $.merge(services, services_children)
          find_children(id_categories_array)
        }
        
        find_children([1]);

        return services;
      },
      recordsClientsServices() {
        const { records, recordsClients, recordsServices } = data;
        const {  servicesCompany } = this;

        return records.filter(r => {
          const recordClients = recordsClients.filter(rc => rc.id === r.id),
                recordServices = recordsServices.filter(rs => rs.record_id === r.id);

          let recordClientsIds = [],
              clientsIds = [],
              servicesIds = [],
              nameServices = [];

          recordClients.filter(rc => {
            recordClientsIds.push(rc.record_client_id);
            clientsIds.push(rc.client_id);
          });
          recordServices.filter(rs => {
            const serviceName = servicesCompany.find(sc => sc.id === rs.category_id);
            servicesIds.push(rs.category_id);
            nameServices.push(serviceName.name);
          });

          return Object.assign(r, { records_clients_ids: recordClientsIds, clients_ids: clientsIds, services_ids: servicesIds, services_name: nameServices });
        });
      },
      categoriesTreeIncome() {
        var categories = vmPanelsAdd.categories.filter(c => c.budget == 'income');

        return {
          value: { name: 'Доход', id: 0, budget: 'income' },
          children: buildHierarchy(categories)
        }
      },
      categoriesTreeExpense() {
        var categories = vmPanelsAdd.categories.filter(c => c.budget == 'expense');

        return {
          value: { name: 'Расход', id: 0, budget: 'expense' },
          children: buildHierarchy(categories)
        }
      },
      people() { return data.people },
      affiliates() { return data.affiliates },
      categories() { return data.categories },
    },
  });
</script>
