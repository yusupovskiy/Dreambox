<!DOCTYPE html>
<html class="cool-scrollbar">
  <head>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>Dreambox</title>
    <%= csrf_meta_tags %>

    <%= stylesheet_link_tag    'application', media: 'all', 'data-turbolinks-track': 'reload' %>
    <%if Rails.env.production?%>
      <script src="https://cdn.jsdelivr.net/npm/vue"></script>
    <%else # development | test %>
      <%=javascript_include_tag 'vue'%>
    <%end%>
    <%= javascript_include_tag 'application', 'data-turbolinks-track': 'reload' %>
    <script type="text/javascript" charset="utf-8">
      Vue.config.productionTip = Vue.config.devtools = false;
      const Routes = {
          getAllClients:    companyId => `/companies/${companyId}/clients.json`,
          getAllServices:   (companyId) => `/companies/${companyId}/services.json`,
          addNewClient:     companyId => `/companies/${companyId}/clients.json`,
          addNewService:    companyId => `/companies/${companyId}/services.json`,
          removeClient:     (companyId, clientId) => `/companies/${companyId}/clients/${clientId}.json`,
          removeService:    (companyId, serviceId) => `/companies/${companyId}/services/${serviceId}.json`,
          signIn:           () => '/auth/sign_in?return_url=' + encodeURIComponent(location.href),
          clientInfoWindow: () => '/windows/client-info',
          serviceInfoWindow:() => '/windows/service-info',
          addClientWindow:  () => '/windows/add-client',
          addServiceWindow: () => '/windows/add-service',
      };
      const AUTHENTICITY_TOKEN = document.querySelector('meta[name=csrf-token]').content
    </script>
  </head>

  <body data-params="<%=params.to_json%>" class="home">

    <header>
      <div class="panel-logo">

        <a class="logo" href="/clients">
          <img src="/images/lflflf.png">
        </a>

        <div class="info-logo">
          <div class="biz-logo">БИЗНЕС</div>
          <% if signed_in? and Client.exists? id: current_user.people_id %>
            <div class="company-logo btn-show-list">
              <div class="name-company" style="float: left;"><%= @current_company.name %></div>
              <%= render 'layouts/list_works_user' %>
            </div>
          <% end %>
        </div>
      </div>

      <%= render 'layouts/panel_user' %>

    </header>

    <nav class="menu">
      <div class="item-menu icon-menu"></div>
      <div class="btn-add-menu">
        <ion-icon name="add"></ion-icon>
      </div>
      <div class="pnl-add">
        <div class="header-pnl-add">
          <div class="btn-back new-btn btn-close-pnl-add" style="margin: 0;">
            <ion-icon name="arrow-back" role="img" class="hydrated" aria-label="arrow back"></ion-icon>
          </div>
          <h2 class="title-pnl-add" style="margin-left: 50px;">Добавить</h2>
        </div>
        <div class="body-pnl-add">
          <%= link_to new_client_path, class: 'item-panel-add' do %>
            <div class="sdfdsa"></div><div class="dsafdsaf">Клиента</div>
          <% end %>
          <%= link_to new_record_path, class: 'item-panel-add' do %>
            <div class="sdfdsa" style="background-image: url(/images/group1.png);"></div><div class="dsafdsaf">Группу</div>
          <% end %>
          <%= link_to new_client_path, class: 'item-panel-add' do %>
            <div class="sdfdsa" style="background-image: url(/images/teacher.png);"></div><div class="dsafdsaf">Сотрудника</div>
          <% end %>
          <%= link_to add_field_path, class: 'item-panel-add' do %>
            <div class="sdfdsa"></div><div class="dsafdsaf">Свои поля</div>
          <% end %>
        </div>
      </div>
      <%= link_to '', clients_path, class: 'item-menu icon-client' %>
      <a href="#" class="item-menu icon-company"></a>
      <a href="#" class="item-menu icon-finance"></a>
    </nav>

    <content>
      <%= yield %>
    </content>
    
    <div class="back-background"></div>
    
    <script src="https://unpkg.com/ionicons@4.2.4/dist/ionicons.js"></script>

<script src="https://cdn.jsdelivr.net/npm/vue@2.5.16/dist/vue.js"></script>
<script src="https://cdn.jsdelivr.net/npm/lodash@4.17.10/lodash.min.js"></script>

<script type="text/javascript">
  var authToken = document.getElementById("authenticity_token").value
  var valueInput = document.getElementById("search").value
  var lastId = null;

  var vmClient = new Vue ({
    el: '#client',
    data: {
      client: [],
      showTotalInfo: false,
      openPanelAdd: null,
      selectRecordsClient: [],
      recordsClient: [],
      loadingPanel: false,

      countItemsList: 0,
      panelShow: 'home',

      unsubscribeLoading: false,
      subscribeLoading: false,

      subsClient: [],

      typeClient: '',

      addSubsForRecordClient: '',
      startSubs: '',
      finishSubs: '',
      recalculationNote: '',
      showRecalculationAmount: false,
      recalculationAmount: null,
      showAmount: false,
      amount: null,
      subsCreateLoading: false,
      bookingDate: ''
    },
    methods: {
      attachRecord(record) {
        let {client} = this;
        var complited = false

        if(!this.subscribeLoading) {
          this.subscribeLoading = true;

          setTimeout(() => {
            $.ajax('/records_clients.json', {
              method: 'POST',
              data: {
                authenticity_token: authToken,
                record_client: {
                  record_id: record.id,
                  client_id: client.id,
                }
              },
              success: messege => {
                complited = messege.complited
                vmNotifications.notifications.unshift(messege);
              },
              error: e => console.warn('error', e)
            }).done(newRecordClient => {
              if(complited) {
                newRecordClient = {id: record.id, name: record.name, is_active: true};

                let indexRecordsSelect = this.selectRecordsClient
                  .findIndex(rs => rs.id == record.id);
                this.selectRecordsClient.splice(indexRecordsSelect, 1);

                let indexRecordsClient = this.recordsClient
                  .findIndex(rs => rs.id == record.id);

                if(indexRecordsClient < 0 ) {
                  this.recordsClient.unshift(newRecordClient);
                }
                else {
                  this.recordsClient.splice(indexRecordsClient, 1, newRecordClient);
                }
              }
              this.subscribeLoading = false;
            });
          }, 600);
        }
      },
      unpinRecord(record) {
        let {client} = this;
        var complited = false

        if(!this.unsubscribeLoading) {
          this.unsubscribeLoading = true;

          setTimeout(() => {
            $.ajax('/records_client_unpin/', {
              method: 'DELETE',
              data: {
                authenticity_token: authToken,
                record_id: record.id,
                client_id: client.id,
              },
              success: messege => {
                complited = messege.complited
                vmNotifications.notifications.unshift(messege);
              },
              error: e => console.warn('error', e)
            }).done(newRecordClient => {
              if(complited) {
                newRecordClient = {id: record.id, name: record.name, is_active: false};

                let indexRecordsClient = this.recordsClient
                  .findIndex(rs => rs.id == record.id);
                this.recordsClient.splice(indexRecordsClient, 1, newRecordClient);

                let indexRecordsSelect = this.selectRecordsClient
                  .findIndex(rs => rs.id == record.id);

                if(indexRecordsSelect < 0 ) {
                  this.selectRecordsClient.unshift(newRecordClient);
                }
                else {
                  this.selectRecordsClient.splice(indexRecordsSelect, 1, newRecordClient);
                }
              }
              this.unsubscribeLoading = false;
            });
          }, 600);
        }
      },
      clickRecordClientActive(id) {
        let {client} = this;

        if(!$('.record-'+id).hasClass('active')) {
          $('.record-'+id).parents().children().removeClass('active');
          $('.record-'+id).addClass('active');
        }
        else {
          $('.record-'+id).parents().children().removeClass('active');
        }

        $.get(
          '/get_subs_client.json', 
          {
            record_id: id,
            client_id: client.id,
          },
          subsClient => {
            this.subsClient = subsClient;
          }
        );
      },
      createSubClient() {
        let {client, addSubsForRecordClient} = this;
        var complited = false

        if(!this.subsCreateLoading) {
          this.subsCreateLoading = true;

          setTimeout(() => {
            $.ajax('/subscriptions.json', {
              method: 'POST',
              data: {
                authenticity_token: authToken,
                record_id: addSubsForRecordClient,
                client_id: client.id,
                subscription: {
                  start_at: this.startSubs,
                  finish_at: this.finishSubs,
                }
              },
              success: messege => {
                complited = messege.complited
                vmNotifications.notifications.unshift(messege);
              },
              error: e => console.warn('error', e)
            }).done(newRecordClient => {
              if(complited) {
                // newRecordClient = {id: record.id, name: record.name, is_active: true};

                // let indexRecordsSelect = this.selectRecordsClient
                //   .findIndex(rs => rs.id == record.id);
                // this.selectRecordsClient.splice(indexRecordsSelect, 1);

                // let indexRecordsClient = this.recordsClient
                //   .findIndex(rs => rs.id == record.id);

                // if(indexRecordsClient < 0 ) {
                //   this.recordsClient.unshift(newRecordClient);
                // }
                // else {
                //   this.recordsClient.splice(indexRecordsClient, 1, newRecordClient);
                // }
                this.getDateSub();
              }
              this.subsCreateLoading = false;
            });
          }, 600);
        }
      },
      getDateSub() {
        let {addSubsForRecordClient} = this;

        if(addSubsForRecordClient != '' && addSubsForRecordClient != 0) {
          $.get(
            '/get_autodata_subscription.json', 
            { client_id: this.client.id, record_id: addSubsForRecordClient },
            dateSub => {
              this.startSubs = dateSub.start_date;
              this.finishSubs = dateSub.finish_date;
              this.bookingDate = dateSub.booking_date;
            }
          );
        }
      }
    },
    computed: {
      urlEditClient: function() {
        return '/clients/' + this.client.id + '/edit';
      },
      clientBasicInformation: function() {
        let {client} = this;
        var clientBasicInformation = '';
        var patronymic = client.patronymic != '' ? true : false;
        var birthday = client.birthday != null ? true : false;
        var phone_number = client.phone_number != '' ? true : false;

        if (birthday) {
          var birthDay = new Date(client.birthday);
          var yearBirthDay = birthDay.getFullYear();

          var today = new Date();
          var yearToday = today.getFullYear();

          var age = yearToday - yearBirthDay;

          if (age == 1 || age == 21 || age == 31) {
            age = age + ' год';
          }
          else if ((1 < age && age < 5) || (21 < age && age < 25) || (31 < age && age < 35)) {
            age = age + ' года';
          }
          else {
            age = age + ' лет';
          }
        }

        if (patronymic) {
          if (birthday && phone_number) {
            clientBasicInformation = client.patronymic + ', ' + age + ', ' + client.phone_number;
          }
          else if (birthday && !phone_number) {
            clientBasicInformation = client.patronymic + ', ' + age;
          }
          else if (!birthday && phone_number) {
            clientBasicInformation = client.patronymic + ', ' + client.phone_number;
          }
          else if (!birthday && !phone_number) {
            clientBasicInformation = client.patronymic;
          }
        }
        else if (birthday) {
          if (phone_number) {
            clientBasicInformation = age + ', ' + client.phone_number;
          }
          else if (!phone_number) {
            clientBasicInformation = age;
          }
        }
        else if (phone_number) {
          clientBasicInformation = client.phone_number;
        }
        else {
          clientBasicInformation = '';
        }

        return clientBasicInformation;
      }
    },
    watch: {
      "client" : function() {
        this.panelShow = 'client';
        this.showTotalInfo = false;
        this.addSubsForRecordClient = '';

        url = window.location.href;
        newUrl = updateURLParameter(url, 'client', this.client.id);
        history.pushState('', 'Клиент', newUrl);

        $.get(
          '/get_select_records_client.json', 
          { client_id: this.client.id },
          selectRecordsClient => this.selectRecordsClient = selectRecordsClient
        );
        $.get(
          '/get_records_client.json', 
          { client_id: this.client.id },
          recordsClient => this.recordsClient = recordsClient
        );
      },
      "typeClient" : function() {
        vmListClients.sendQuery('clients', this.typeClient);
      },
      "showTotalInfo" : function() {
        if(this.showTotalInfo) {
          setTimeout(() => {
            $.get(
              '/get_fields_client', 
              { client_id: this.client.id },
              fieldsClient => { $('#fields-client').html(fieldsClient); }
            );
          }, 600);
        }
      },
      "addSubsForRecordClient" : function() {
        this.getDateSub();
      }
    }
  });
  
  var vmNotifications = new Vue ({
    el: '#notifications',
    data: {
      notifications: []
    }
  });

  var vmListClients = new Vue ({
    el: '#app',
    data: {
      clientsCompany: [],
      recordsCompany: [],
      titleInput: "Поиск клиентов", // будет подставляться название группы
      searchClients: [],
      loadComplete: false,
      searchValue: valueInput
    },
    methods: {
      clickClient(client) {
        this.activeElement('client-', client.id, 'list');
        vmClient.client = client;
      },
      sendQuery(type, value) {
        url = window.location.href;
        newUrl = updateURLParameter(url, type, value);

        this.clientsQuery(newUrl);
      },
      clientsQuery(url) {

        urlHash = new URL(url);
        clientQuery = urlHash.searchParams.get("search");
        typeOfClients = urlHash.searchParams.get("clients");

        arrayClientQuery = validSpaces(clientQuery).split(' ');

        clearTimeout(lastId)
        this.loadComplete = false;

        if(typeOfClients == null) {
          typeOfClients = 'current'
          url = updateURLParameter(url, 'clients', typeOfClients);
        }
        this.activeElement(typeOfClients, '', 'indecators');

        lastId = setTimeout(() => {
          $.get(
            '/get_clients.json', 
            {
              typeOfClients: typeOfClients,
              lastNameClients: arrayClientQuery[0],
              firstNameClients: arrayClientQuery[1],
              patronymicClients: arrayClientQuery[2]
            // ,
            // record: 29
            },
            searchClients => {
              this.searchClients = searchClients;
              this.loadComplete = true;
              history.pushState('', clientQuery, url);
            }
          )
        }, 600);
      },
      activeElement(nameClass, id, parent) {
        setTimeout(() => {
          $('.' + nameClass + id).parents('.' + parent).children().removeClass('active');
          $('.' + nameClass + id).addClass('active');
        }, 0.1);
      }
    },
    created() {
      this.sendQuery('search', valueInput);
      vmClient.panelShow = 'home';

      $.ajax({
        url: '/get_clients.json',
        success: clientsCompany => {
          this.clientsCompany = clientsCompany;

          urlHash = new URL(window.location.href);
          id = urlHash.searchParams.get("client");
          if(id != null) {
            id = parseInt(id, 10);
            getClient = _.find(this.clientsCompany, {id:id});
            this.clickClient(getClient);
          }
        }
      });

      $.get(
        '/get_records.json',
        recordsCompany => this.recordsCompany = recordsCompany
      );
    },
    watch: {
      "searchClients" : function() {
        vmClient.countItemsList = this.searchClients.length;

        urlHash = new URL(window.location.href);
        id = urlHash.searchParams.get("client");
        this.activeElement('client-', id, 'list');
      }
    }
  });
</script>

  </body>
</html>