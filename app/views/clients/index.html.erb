<div id="clients">
  <div class="panel-list">
    <%= render 'clients/index_search' %>
    <%= render 'clients/index_list' %>
  </div>

  <div class="panels-content hide-scrollbar">
    <input type="hidden" id="authenticity_token" value="<%=form_authenticity_token%>">
    <%= render 'clients/home' %>
    <%= render 'clients/client' %>
    <%= render 'clients/record' %>
  </div>
</div>

<%= render 'clients/client_records_vue' %>
<%= render 'clients/home_records' %>
<%= render 'clients/home_services' %>
<%= render 'clients/home_affiliates' %>
<%= render 'clients/client_panel_info' %>
<%= render 'clients/client_panel_info_add_sub' %>
<%= render 'clients/client_panel_info_add_transaction' %>
<%= render 'clients/client_records' %>
<%= render 'clients/client/client_transactions' %>

<%= render 'clients/record_panel_info' %>
<%= render 'clients/record_panel_info_add_service' %>
<%= render 'clients/record_service' %>

<script type="text/javascript">
  var authToken = document.getElementById("authenticity_token").value;
  // var valueInput = document.getElementById("search").value
  var lastId = null;

  var vmClient = new Vue ({
    el: '#clients',
    data: {
      clients: [],
      affiliatesCompany: [],
      recordsCompany: [],
      servicesCompany: [],
      titleInput: 'Поиск клиентов',
      loadComplete: false,

      subscriptions: [],

      panelShow: 'home',

      client: [],
      selectRecordsClient: [], // можно убрать эту переменную и заменить recordsCompany, и получать переменную минус текущие записи клиента
      recordsClient: [],
      clientTransactions: [],

      record: [],
      servicesRecord: [],

      search: '',
      showSort: false,
      columns: [
        {
          name: 'По ФИО',
          column: 'full_name'
        }, 
        {
          name: 'По дате рождения',
          column: 'birthday'
        }, 
        {
          name: 'По долгу',
          column: 'unpaid_debt_subs'
        },
      ],
      sortKey: 'full_name',
      reverse: false,

      filtrationElements: [],
      typeClients: '',
    },
    methods: {
      addElementFiltration(id, object) {
        let indexElement = this.filtrationElements
          .findIndex(element => element.id == id && element.object == object);

        if(!(indexElement > -1)) {
          var urlHash = new URL(window.location.href);
          var currentParamsFilters = urlHash.searchParams.get("filters");
          var currentParamsFilters = currentParamsFilters == null ? '' : currentParamsFilters + ',';
          var newParamsFilters = currentParamsFilters + object + '-' + id;
          this.sendQuery(newParamsFilters, 'filters', '');

          var newElementFiltration = {id: id, object: object};
          this.filtrationElements.unshift(newElementFiltration);
        }

      },
      sortBy(sortKey) {
        this.reverse = (this.sortKey == sortKey) ? !this.reverse : false;
        this.sortKey = sortKey;
      },
      clickRecord(record) {
        this.record = record;
        this.panelShow = 'record';
        this.titleInput = record.name;
        this.typeClients = 'current';

        url = window.location.href;
        newUrl = updateURLParameter(url, 'record', record.id);
        history.pushState(record.name, record.name, newUrl);

        $.get('/records_services.json?record_id='+record.id,
          servicesRecord => this.servicesRecord = servicesRecord);
      },
      clickClient(client) {
        this.client = client;
        this.panelShow = 'client';

        url = window.location.href;
        newUrl = updateURLParameter(url, 'client', client.id);
        history.pushState('Клиент', 'Клиент', newUrl);

        $.get('/get_select_records_client.json', 
          { client_id: client.id },
          selectRecordsClient => this.selectRecordsClient = selectRecordsClient
        );
        $.get('/get_records_client.json', 
          { client_id: client.id },
          recordsClient => this.recordsClient = recordsClient
        );
        $.get('/get_client_transactions.json', 
          { client_id: client.id },
          clientTransactions => this.clientTransactions = clientTransactions
        );
      },
      sendQuery(query, type, byDefault) {
        var url = window.location.href;

        if(query == '') {
          var urlHash = new URL(url);
          var params = urlHash.searchParams.get(type);
          query = (params == null ? byDefault : params);

          return query;
        }

        var newUrl = updateURLParameter(url, type, query);
        history.pushState(query, query, newUrl);
      },
    },
    created() {
      this.search = this.sendQuery('', 'search', '');
      this.typeClients = this.sendQuery('', 'clients', 'current');

      var urlHash = new URL(window.location.href);
      var client_id = urlHash.searchParams.get("client");
      var record_id = urlHash.searchParams.get("record");
      var filters = urlHash.searchParams.get("filters");

      setTimeout(() => {
        $.get('/get_affiliates.json',
          affiliatesCompany => this.affiliatesCompany = affiliatesCompany );

        $.get('/companies/1/services.json',
          servicesCompany => this.servicesCompany = servicesCompany );

        $.get('/get_subscriptions.json',
          subscriptions => this.subscriptions = subscriptions
        );

        $.get('/get_records.json',
          recordsCompany => {
            this.recordsCompany = recordsCompany;

            if(record_id != null) {
              let indexCurrentRecord = recordsCompany
                .findIndex(record => record.id == record_id);

              if(indexCurrentRecord > -1) {
                getRecord = this.recordsCompany[indexCurrentRecord];
                this.clickRecord(getRecord);
              }
            }
          }
        );

        $.get('/get_clients.json', clients => {
          this.clients = clients;

          if(client_id != null) {
            let indexCurrentClient = clients
              .findIndex(client => client.id == client_id);

            if(indexCurrentClient > -1) {
              getClient = this.clients[indexCurrentClient];
              this.clickClient(getClient);
            }
          }
          
          if(filters != null) {
            var filtersArray = filters.split(',');
            var newFiltersArray = ']';
            for (var i = 0; i < filtersArray.length; i++) {
              var array = filtersArray[i].split('-');
  
              if(i != 0) {
                newFiltersArray = ',' + newFiltersArray;
              }
  
              newFiltersArray = '{ "id": ' + array[1] + ', "object": "' + array[0] + '" }' + newFiltersArray;
            }
            newFiltersArray = '[' + newFiltersArray;
            var jsonFiltersArray = JSON.parse(newFiltersArray);
            this.filtrationElements = jsonFiltersArray;
          }

          this.loadComplete = true;
        });
      }, 600);
    },
    watch: {
      search() {
        clearTimeout(lastId);

        lastId = setTimeout(() => {
          var url = window.location.href;
          var newUrl = updateURLParameter(url, 'search', this.search);
          history.pushState(this.search, this.search, newUrl);

          if(this.search == '') {
            var newUrl = deleteURLParameter(url, 'search');
            history.pushState(this.search, this.search, newUrl);
          }
        }, 600);
      },
    },
    computed: {
      filtrationElementsName() {
        let {filtrationElements, recordsCompany, servicesCompany, affiliatesCompany} = this;

        return filtrationElements.filter(function (element) {
          let indexRecord = recordsCompany
            .findIndex(r => r.id == element.id);
          record = recordsCompany[indexRecord];

          let indexService = servicesCompany
            .findIndex(s => s.id == element.id);
          service = servicesCompany[indexService];

          let indexAffiliate = affiliatesCompany
            .findIndex(a => a.id == element.id);
          affiliate = affiliatesCompany[indexAffiliate];

          if (record != null && element.object == 'r') {
            return Object.assign(element, {name: record.name});
          }
          else if (service != null && element.object == 's') {
            return Object.assign(element, {name: service.name});
          }
          else if (affiliate != null && element.object == 'a') {
            return Object.assign(element, {name: affiliate.address});
          }
        });

      },

      activeRecords() {
        let {filtrationElementsName} = this;

        return filtrationElementsName.filter(function (element) {
          if (element.object == 'r') {
            return element;
          }
        });
      },
      activeService() {
        let {filtrationElementsName} = this;

        return filtrationElementsName.filter(function (element) {
          if (element.object == 's') {
            return element;
          }
        });
      },

      recordsFilter() {
        let {recordsCompany, activeRecords} = this;

        return recordsCompany.filter(function (record) {
          if(activeRecords.find( currentValue => currentValue.id == record.id ) != undefined) {
            return Object.assign(record, {status: 'active'});
          }
          else {
            return Object.assign(record, {status: 'default'});
          }
        });
      },
      servicesFilter() {
        let {servicesCompany, activeService} = this;

        return servicesCompany.filter(function (service) {
          if(activeService.find( currentValue => currentValue.id == service.id ) != undefined) {
            return Object.assign(service, {status: 'active'});
          }
          else {
            return Object.assign(service, {status: 'default'});
          }
        });
      },

      clientSubscriptions: function () {
        let {subscriptions, client} = vmClient;
        return subscriptions.filter(function (subs) {
          if (subs.client_id == client.id) {
            return subs;
          }
        });
      },

      clientsFiltRecord() {
        let {record, activeRecords} = this;

        return this.clients.filter(function (client) {
          if(Object.keys(record).length > 0) {
            if(client.records_id.find( currentValue => currentValue == record.id ) == record.id)
              return client;
          }
          else if(Object.keys(activeRecords).length > 0) {
            var count = activeRecords.filter(n => client.records_id.indexOf(n.id) > -1 )

            if(count.length > 0) {
              return client;
            }
          }
          else
            return client;
        });
      },
      clientsSorted() {
        const k = this.sortKey;
        return this.clientsFiltRecord.sort((a, b) => (a[k] < b[k] ? -1 : a[k] > b[k] ? 1 : 0) * [1, -1][+this.reverse]);
      },
      clientsSearch() {
        const s = validSpaces(this.search.toLowerCase());
        return this.clientsSorted.filter(n => Object.values(n.full_name.split()).some(m => m.toString().toLowerCase().includes(s)));

        // нужно ссоритировать по выбранной группе, также по фильтрам
      },
      clientsDebtors() {
        return this.clientsSearch.filter(function (client) {
          if (client.unpaid_debt_subs > 0) {
            return client;
          }
        });
      },
      clientsCurrent() {
        return this.clientsSearch.filter(function (client) {
          if(!((client.records_id.length == 1 && client.records_id[0] == null) || client.records_id.length <= 0)) {
            return client;
          }
        });
      },
      clientsTotal() {
        return this.clientsSearch;
      },
      clientsFilter() {
        this.sendQuery(this.typeClients, 'clients',  '')

        if(this.typeClients == 'debtors') {
          return this.clientsDebtors;
        }
        else if(this.typeClients == 'current') {
          return this.clientsCurrent;
        }
        else if(this.typeClients == 'total') {
          return this.clientsTotal;
        }
      },
      amountTotalDebtors() {
        return this.clientsFilter.reduce(function(sum, client) {
          return sum + (client.unpaid_debt_subs);
        }, 0);
      }
    }
  });
</script>
