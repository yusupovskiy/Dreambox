<div id="clients">
  <div class="panel-list" :class="[ clientActive() ? '' : 'active-client' ]">

    <search-list :title-input='titleInput' :search='search' :subject-search='clients' :columns='columns' :sort-key='sortKey' :reverse='reverse'></search-list>

    <list :load-complete='loadComplete' 
          :client='client'
          :clients='clients' 
          :clients-filter='clientsFilter'
          :record='record'
    ></list>
  </div>

  <div class="panels-content hide-scrollbar">
    <input type="hidden" id="authenticity_token" value="<%=form_authenticity_token%>">

    <home v-if="panelShow == 'home'"
          :filtration-elements='filtrationElements' 
          :records-company='records' 
          :services-company='servicesCompany' 
          :affiliates-company='affiliates' 
          :clients-current='clientsCurrent' 
          :clients-debtors='clientsDebtors' 
          :clients-total='clientsTotal' 
          :type-clients='typeClients' 
          :amount-total-debtors='amountTotalDebtors' 
          :records-filter='recordsFilter' 
          :search_r='search_r' 
          :services-filter='servicesFilter' 
          :search_s='search_s' 
          :affiliates-filter='affiliatesFilter' 
          :search_a='search_a'
    ></home>

    <client
      v-if='panelShow == "client"'
      :client="client" 
      :records="records"
      :categories="categories"
      :affiliates="affiliates" 
      :search_r='search_r' 
    ></client>

    <record 
      v-if='panelShow == "record"'
      :record="record" 
      :services-company="servicesCompany" 
      :clients-current="clientsCurrent" 
      :clients-debtors="clientsDebtors" 
      :clients-total="clientsTotal" 
      :amount-total-debtors="amountTotalDebtors"
    ></record>

  </div>
</div>

<%= render 'clients/index_search' %>
<%= render 'clients/index_list' %>
<%= render 'clients/home' %>
<%= render 'clients/client' %>
<%= render 'clients/record' %>

<script type="application/javascript">
  var lastId = null;

  var vmClient = new Vue ({
    el: '#clients',
    data: {
      clients: [],
      affiliates: [],
      records: [],
      recordsClients: [],
      discounts: [],
      titleInput: 'Клиенты',
      loadComplete: false,
      categories: [],

      subscriptions: [],

      panelShow: 'home',

      client: {},
      record: {},
      recordsServices: [],

      search: '',
      search_r: '',
      search_s: '',
      search_a: '',

      sortKey: 'full_name',
      reverse: false,
      columns: [
        {
          name: 'По ФИО',
          column: 'full_name'
        }, 
        {
          name: 'По дате рождения',
          column: 'birthday'
        }, 
        {
          name: 'По долгу',
          column: 'unpaid_debt_subs'
        },
      ],

      filtrationElements: [],
      typeClients: '',

      reminders: [],
      logs: [],


      sortKey: 'full_name',
      reverse: false,
      querySearch: {},

      transactions: [],
      operations: [],
      reminders: [],
    },
    methods: {
      addElementFiltration(id, object) {
        let indexElement = this.filtrationElements
          .findIndex(element => element.id == id && element.object == object);

        if(!(indexElement > -1)) {
          var urlHash = new URL(window.location.href);
          var currentParamsFilters = urlHash.searchParams.get("filters");
          var currentParamsFilters = currentParamsFilters == null ? '' : currentParamsFilters + ',';
          var newParamsFilters = currentParamsFilters + object + '-' + id;
          this.sendQuery(newParamsFilters, 'filters', '');

          var newElementFiltration = {id: id, object: object};
          this.filtrationElements.unshift(newElementFiltration);
        }
      },
      deleteParamsFiltration(index, id, object) {
        let {filtrationElements} = this;

        let urlHash = new URL(window.location.href);
        let filters_params = urlHash.searchParams.get("filters");
        filters_params = filters_params.replace(',' + object + '-' + id, '');
        filters_params = filters_params.replace(object + '-' + id + ',', '');
        filters_params = filters_params.replace(object + '-' + id, '');

        filtrationElements.splice(index, 1);

        if(filters_params.length > 0) {
          this.sendQuery(filters_params, 'filters', '');
        }
        else {
          url = window.location.href;
          newUrl = deleteURLParameter(url, 'filters');
          history.replaceState('', '', newUrl);
        }
      },

      clickRecord(record) {
        this.record = record;
        this.panelShow = 'record';
        // this.titleInput = record.name;
        this.titleInput = "Записанные клиенты";

        if(this.typeClients == 'total')
          this.typeClients = 'current';

        url = window.location.href;
        newUrl = updateURLParameter(url, 'record', record.id);
        history.replaceState(record.name, record.name, newUrl);
      },
      clickClient(client) {
        this.client = client;
        this.panelShow = 'client';

        url = window.location.href;
        newUrl = updateURLParameter(url, 'client', client.id);
        history.replaceState('Клиент', 'Клиент', newUrl);
      },
      clientActive() {
        return Object.keys(this.client).length == 0;
      },
      sendQuery(query, type, byDefault) {
        var url = window.location.href;

        if(query == '') {
          var urlHash = new URL(url);
          var params = urlHash.searchParams.get(type);
          query = (params == null ? byDefault : params);

          return query;
        }

        var newUrl = updateURLParameter(url, type, query);
        history.replaceState(query, query, newUrl);
      },
    },
    created() {
      this.search = this.sendQuery('', 'search', '');
      this.typeClients = this.sendQuery('', 'clients', 'current');
      this.search_r = this.sendQuery('', 'search_r', '');
      this.search_s = this.sendQuery('', 'search_s', '');
      this.search_a = this.sendQuery('', 'search_a', '');

      if(this.typeClients === "current") {
        this.titleInput = "Клиенты"
      }
      else if(this.typeClients === "debtors") {
        this.titleInput = "Должники"
      }
      if(this.typeClients === "total") {
        this.titleInput = "Все клиенты"
      }

      var urlHash = new URL(window.location.href);
      var client_id = urlHash.searchParams.get("client");
      var record_id = urlHash.searchParams.get("record");
      var filters = urlHash.searchParams.get("filters");

      setTimeout(() => {
        $.get('/get_data.json', data => {
          this.logs = data.logs;
          this.operations = data.operations;
          this.clients = data.clients;
          this.affiliates = data.affiliates;
          this.subscriptions = data.subscriptions;
          this.reminders = data.reminders;
          this.categories = data.categories;
          this.records = data.records;
          this.recordsServices = data.records_services;
          this.transactions = data.transactions;
          this.discounts = data.discounts;
          this.recordsClients = data.records_clients;

          if(client_id != null) {
            let indexCurrentClient = this.clients
              .findIndex(client => client.id == client_id);

            if(indexCurrentClient > -1) {
              getClient = this.clients[indexCurrentClient];
              this.clickClient(getClient);
            }
          }
          else if(record_id != null) {
            let indexCurrentRecord = this.records
              .findIndex(record => record.id == record_id);

            if(indexCurrentRecord > -1) {
              getRecord = this.records[indexCurrentRecord];
              this.clickRecord(getRecord);
            }
          }

          if(filters != null) {
            var filtersArray = filters.split(',');
            var newFiltersArray = ']';
            for (var i = 0; i < filtersArray.length; i++) {
              var array = filtersArray[i].split('-');
  
              if(i != 0) {
                newFiltersArray = ',' + newFiltersArray;
              }
  
              newFiltersArray = '{ "id": ' + array[1] + ', "object": "' + array[0] + '" }' + newFiltersArray;
            }
            newFiltersArray = '[' + newFiltersArray;
            var jsonFiltersArray = JSON.parse(newFiltersArray);
            this.filtrationElements = jsonFiltersArray;
          }

          this.loadComplete = true;
        });
      }, 600);
    },
    computed: {
      subscriptionsAmount() {
        let { subscriptions, transactions, operations } = this;

        return subscriptions.filter(s => {
          let payment = transactions.reduce((sum, t) => {
            return (t.operation_id === s.operation_id && t.is_active) ? sum + t.amount : sum;
          }, 0);
          let client_id = operations.find(o => o.id === s.operation_id).client_id;

          return Object.assign(s, { 
            payment: payment, 
            debt: s.price - payment, 
            client_id: client_id 
          });
        });
      },

      servicesCompany() {
        let {categories} = this;
        var services = [];
        var find_children = function(level) {
          var services_children = categories.filter(c => c.level == level);
          var id_categories_array = []

          if(!services_children.length > 0) {
            return false
          }

          services_children.filter(function(i) {
            id_categories_array.push(i.id)
          });

          services = $.merge(services, services_children)
          find_children(id_categories_array)
        }
        
        find_children([1]);

        return services;
      },
      // получение всех выделенных записей
      activeRecords() {
        let {filtrationElements} = this;

        return filtrationElements.filter(function (element) {
          if (element.object == 'r') {
            return element;
          }
        });
      },
      activeServices() {
        let {filtrationElements} = this;

        return filtrationElements.filter(function (element) {
          if (element.object == 's') {
            return element;
          }
        });
      },
      activeAffiliates() {
        let {filtrationElements} = this;

        return filtrationElements.filter(function (element) {
          if (element.object == 'a') {
            return element;
          }
        });
      },
      // получение записей активных услуг и филиалов
      currentRecords() {
        let {activeRecords, activeServices, servicesCompany, records, activeAffiliates, recordsServices} = this;
        var arrayIdActiveRecord = [];

        recordsServices.filter(function (service_record) {
          if(activeServices.find( value => value.id == service_record.category_id) != undefined) {
            arrayIdActiveRecord = arrayIdActiveRecord.concat(service_record.record_id);
          }
        });
        // добавление записей активных филиалов
        records.map(function (record) {
          if(activeAffiliates.find( currentValue => currentValue.id == record.affiliate_id ) != undefined) {

            arrayIdActiveRecord = arrayIdActiveRecord.concat(record.id);
          }
        });

        return arrayIdActiveRecord.filter(function(item, pos) {
            return arrayIdActiveRecord.indexOf(item) == pos;
        });
      },
      // добавления статуса для каждого элемента для списка записей по данным, полученым  выше
      recordsFilter() {
        let {records, activeRecords, currentRecords, activeServices, activeAffiliates} = this;
        var have = Object.keys(activeRecords).length > 0 || Object.keys(activeServices).length > 0 || Object.keys(activeAffiliates).length > 0;

        if(have) {
          return records.filter(function (record) {
            if(activeRecords.find( currentValue => currentValue.id == record.id ) != undefined) {
              return Object.assign(record, {status: 'active'});
            }
            else if(currentRecords.find( currentValue => currentValue == record.id ) != undefined) {
              return Object.assign(record, {status: 'current'});
            }
            else {
              return Object.assign(record, {status: 'default'});
            }
          });
        }
        else {
          return records.filter(function (record) {
            return Object.assign(record, {status: 'current'});
          });
        }
      },

      // содержаться все услуги, записи которых являются активными
      currentServices() {
        let {recordsServices, activeRecords} = this;

        var arrayIdRecord = [];
        var have = Object.keys(activeRecords).length > 0;

        if(have) {
          recordsServices.filter(function (service_record) {
            if(activeRecords.find( value => value.id == service_record.record_id) != undefined) {
              arrayIdRecord = arrayIdRecord.concat(service_record.category_id);
            }
          });
        }

        return arrayIdRecord.filter(function(item, pos) {
            return arrayIdRecord.indexOf(item) == pos;
        });
      },
      // содержаться все филиалы, записи которых являются активными
      currentAffiliates() {
        let {recordsFilter, activeRecords} = this;

        var arrayIdRecord = [];
        var have = Object.keys(activeRecords).length > 0;

        if(have) {
          recordsFilter.filter(function(record) {
            if(record.status == 'active') {
              arrayIdRecord.push(record.affiliate_id);
            }
          });
        }

        return arrayIdRecord.filter(function(item, pos) {
            return arrayIdRecord.indexOf(item) == pos;
        });
      },

      servicesFilter() {
        let {servicesCompany, currentServices, activeServices, activeRecords} = this;
        var have = Object.keys(activeServices).length > 0 || Object.keys(activeRecords).length > 0;

        if(have) {
          return servicesCompany.filter(function (service) {
            if(activeServices.find( currentValue => currentValue.id == service.id ) != undefined) {
              return Object.assign(service, {status: 'active'});
            }
            else if(currentServices.find( currentValue => currentValue == service.id ) != undefined) {
              return Object.assign(service, {status: 'current'});
            }
            else {
              return Object.assign(service, {status: 'default'});
            }
          });
        }
        else {
          return servicesCompany.filter(function (service) {
            return Object.assign(service, {status: 'current'});
          });
        }
      },
      affiliatesFilter() {
        let {affiliates, activeAffiliates, currentAffiliates, activeRecords} = this;
        var sortAffiliates = Object.keys(activeAffiliates).length > 0 || Object.keys(activeRecords).length > 0;

        if(sortAffiliates) {
          return affiliates.filter(function (affiliate) {
            if(activeAffiliates.find( currentValue => currentValue.id == affiliate.id ) != undefined) {
              return Object.assign(affiliate, {status: 'active'});
            }
            else if(currentAffiliates.find( currentValue => currentValue == affiliate.id ) != undefined) {
              return Object.assign(affiliate, {status: 'current'});
            }
            else {
              return Object.assign(affiliate, {status: 'default'});
            }
          });
        }
        else {
          return affiliates.filter(function (affiliate) {
            return Object.assign(affiliate, {status: 'current'});
          });
        }
      },

      // clientSubscriptions() {
      //   let {subscriptions, client} = this;
      //   return subscriptions.filter(function (subs) {
      //     if (subs.client_id == client.id && subs.is_active == true) {
      //       return subs;
      //     }
      //   });
      // },

      clientsRecords() {
        let {clients, recordsClients} = this;

        return clients.filter(function (client) {
          var arraySubscribedRecordsId = [];
          var arrayUnsubscribedRecordsId = [];

          recordsClients.filter(function (record_client) {
            if(client.id == record_client.client_id) {
              if(record_client.is_active == true) {
                arraySubscribedRecordsId.push(record_client.id);
              }
              else if(record_client.is_active == false) {
                arrayUnsubscribedRecordsId.push(record_client.id);
              }
            }
          });

          arraySubscribedRecordsId = arraySubscribedRecordsId.filter(function(item, pos) {
              return arraySubscribedRecordsId.indexOf(item) == pos;
          });
          arrayUnsubscribedRecordsId = arrayUnsubscribedRecordsId.filter(function(item, pos) {
              return arrayUnsubscribedRecordsId.indexOf(item) == pos;
          });

          Object.assign(client, {subscribed_records_id: arraySubscribedRecordsId});
          Object.assign(client, {unsubscribed_records_id: arrayUnsubscribedRecordsId});

          return client;
        });
      },

      clientDebt() {
        let { clientsRecords, subscriptionsAmount, reminders } = this;

        return clientsRecords.filter(c => {
          let debt_subscriptions = subscriptionsAmount.reduce((sum, s) => {
            return (c.id === s.client_id && s.is_active) ? sum + s.debt : sum;
          }, 0);
          let debt_reminders = reminders.reduce((sum, r) => {
            return (c.id === r.client_id && !r.completed) ? sum + r.debt : sum;
          }, 0);

          return Object.assign(c, { 
            full_name: c.first_name + ' ' + c.last_name + ' ' + c.patronymic,
            debt: debt_subscriptions + debt_reminders 
          });
        });
      },
      clientsSorted() {
        const k = this.sortKey;
        return this.clientDebt.sort((a, b) => (a[k] < b[k] ? -1 : a[k] > b[k] ? 1 : 0) * [1, -1][+this.reverse]);
      },
      clientsSearch() {
        const s = validSpaces(this.search.toLowerCase());
        return this.clientsSorted.filter(n => Object.values(n.full_name.split()).some(m => m.toString().toLowerCase().includes(s)));
      },
      clientsFiltRecord() {
        let {record, recordsFilter, activeRecords, currentRecords, activeServices, activeAffiliates} = this;

        var arrayIdRecord = [];
        var sortClientRecords = Object.keys(activeRecords).length > 0  || Object.keys(activeServices).length > 0 || Object.keys(activeAffiliates).length > 0;
        recordsFilter.filter(function(record) {
          if(record.status == 'active' || record.status == 'current') {
            arrayIdRecord.push(record.id);
          }
        });

        return this.clientsSearch.filter(function (client) {
          if(Object.keys(record).length > 0) {
            if(client.subscribed_records_id.find( currentValue => currentValue == record.id ) == record.id)
              return client;
          }
          else if(sortClientRecords) {
            if(arrayIdRecord.some(e => client.subscribed_records_id.indexOf(e) >= 0)) {
              return client;
            }
          }
          else
            return client;
        });
      },
      clientsCurrent() {
        return this.clientsFiltRecord.filter(function (client) {
          if(client.subscribed_records_id.length > 0) {
            return client;
          }
        });
      },
      clientsDebtors() {
        return this.clientsFiltRecord.filter(function (client) {
          if (client.debt > 0) {
            return client;
          }
        });
      },
      clientsTotal() {
        return this.clientsSearch;
      },
      clientsFilter() {
        this.sendQuery(this.typeClients, 'clients',  '')

        if(this.typeClients == 'debtors') {
          return this.clientsDebtors;
        }
        else if(this.typeClients == 'current') {
          return this.clientsCurrent;
        }
        else if(this.typeClients == 'total') {
          return this.clientsTotal;
        }
      },
      amountTotalDebtors() {
        return this.clientsFilter.reduce(function(sum, client) {
          return sum + (client.debt);
        }, 0);
      }
    }
  });
</script>