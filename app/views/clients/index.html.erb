<div id="clients">
  <div class="panel-list">
    <%= render 'clients/index_search' %>
    <%= render 'clients/index_list' %>
  </div>

  <div class="panels-content hide-scrollbar">
    <input type="hidden" id="authenticity_token" value="<%=form_authenticity_token%>">
    <%= render 'clients/home' %>
    <%= render 'clients/client' %>
    <%= render 'clients/record' %>
  </div>
</div>

<%= render 'clients/client_records_vue' %>
<%= render 'clients/home_records' %>
<%= render 'clients/client_panel_info' %>
<%= render 'clients/client_panel_info_add_sub' %>
<%= render 'clients/client_panel_info_add_transaction' %>
<%= render 'clients/client_records' %>
<%= render 'clients/client/client_transactions' %>

<script type="text/javascript">
  var authToken = document.getElementById("authenticity_token").value;
  // var valueInput = document.getElementById("search").value
  var lastId = null;

  var vmClient = new Vue ({
    el: '#clients',
    data: {
      recordsCompany: [],
      titleInput: "Поиск клиентов", // будет подставляться название группы
      loadComplete: false,
      search: '',


      client: [],
      selectRecordsClient: [],
      recordsClient: [],
      clientTransactions: [],

      panelShow: 'home',

      typeClients: '',

      clients: [],


      search: '',
      showSort: false,
      columns: [
        {
          name: 'По ФИО',
          column: 'full_name'
        }, 
        {
          name: 'По дате рождения',
          column: 'birthday'
        }, 
        {
          name: 'По долгу',
          column: 'unpaid_debt_subs'
        },
      ],
      sortKey: 'full_name',
      reverse: false,

      filtrationElements: [],
    },
    methods: {
      addElementFiltration(id, object, name) {
        let indexElement = this.filtrationElements
          .findIndex(element => element.id == id);

        if(!(indexElement > -1)) {
          var urlHash = new URL(window.location.href);
          var currentParamsFilters = urlHash.searchParams.get("filters");
          var currentParamsFilters = currentParamsFilters == null ? '' : currentParamsFilters + ',';
          var newParamsFilters = currentParamsFilters + object + '-' + id;
          this.sendQuery(newParamsFilters, 'filters', '');

          var newElementFiltration = {id: id, object: object, name: name};
          this.filtrationElements.push(newElementFiltration);
        }

      },
      sortBy(sortKey) {
        this.reverse = (this.sortKey == sortKey) ? !this.reverse : false;
        this.sortKey = sortKey;
      },
      clickClient(client) {
        this.client = client;
        this.panelShow = 'client';

        url = window.location.href;
        newUrl = updateURLParameter(url, 'client', client.id);
        history.pushState('Клиент', 'Клиент', newUrl);

        $.get(
          '/get_select_records_client.json', 
          { client_id: client.id },
          selectRecordsClient => this.selectRecordsClient = selectRecordsClient
        );
        $.get(
          '/get_records_client.json', 
          { client_id: client.id },
          recordsClient => this.recordsClient = recordsClient
        );
        $.get(
          '/get_client_transactions.json', 
          { client_id: client.id },
          clientTransactions => this.clientTransactions = clientTransactions
        );
      },
      sendQuery(query, type, byDefault) {
        var url = window.location.href;

        if(query == '') {
          var urlHash = new URL(url);
          var params = urlHash.searchParams.get(type);
          query = (params == null ? byDefault : params);

          return query;
        }

        var newUrl = updateURLParameter(url, type, query);
        history.pushState(query, query, newUrl);
      },
    },
    created() {
      this.search = this.sendQuery('', 'search', '');
      this.typeClients = this.sendQuery('', 'clients', 'current');

      setTimeout(() => {
        $.get(
          '/get_clients.json',
          clients => {
            this.clients = clients;

            urlHash = new URL(window.location.href);
            id = urlHash.searchParams.get("client");
            if(id != null) {
              let indexCurrentClient = clients
                .findIndex(client => client.id == id);

              if(indexCurrentClient > -1) {
                getClient = this.clients[indexCurrentClient];
                this.clickClient(getClient);
              }
            }
            this.loadComplete = true;
          }
        );

        $.get(
          '/get_records.json',
          recordsCompany => this.recordsCompany = recordsCompany
        );

      }, 600);
    },
    watch: {
      search() {
        clearTimeout(lastId);

        lastId = setTimeout(() => {
          var url = window.location.href;
          var newUrl = updateURLParameter(url, 'search', this.search);
          history.pushState(this.search, this.search, newUrl);

          if(this.search == '') {
            var newUrl = deleteURLParameter(url, 'search');
            history.pushState(this.search, this.search, newUrl);
          }
        }, 600);
      },
    },
    computed: {
      sortedClients() {
        const k = this.sortKey;
        return this.clients.sort((a, b) => (a[k] < b[k] ? -1 : a[k] > b[k] ? 1 : 0) * [1, -1][+this.reverse]);
      },
      searchClients() {
        const s = validSpaces(this.search.toLowerCase());
        return this.sortedClients.filter(n => Object.values(n.full_name.split()).some(m => m.toString().toLowerCase().includes(s)));
      },
      clientsDebtors() {
        return this.searchClients.filter(function (client) {
          if (client.unpaid_debt_subs > 0) {
            return client;
          }
        });
      },
      clientsCurrent() {
        return this.searchClients.filter(function (client) {
          if(!((client.records_id.length == 1 && client.records_id[0] == null) || client.records_id.length <= 0)) {
            return client;
          }
        });
      },
      clientsTotal() {
        return this.searchClients;
      },
      clientsFilter() {
        this.sendQuery(this.typeClients, 'clients',  '')

        if(this.typeClients == 'debtors') {
          return this.clientsDebtors;
        }
        else if(this.typeClients == 'current') {
          return this.clientsCurrent;
        }
        else if(this.typeClients == 'total') {
          return this.clientsTotal;
        }
      },
      amountTotalDebtors() {
        return this.clientsFilter.reduce(function(sum, client) {
          return sum + (client.debt_subs - client.total_amount_subs);
        }, 0);
      }
    }
  });
</script>
