<%= form_with(url: [client], model: client, local: true, html: {id: 'main-form'}, data: { 'form-data' => @s3_direct_post.fields, 'url' => @s3_direct_post.url, 'host' => URI.parse(@s3_direct_post.url).host }) do |form| %>

  <div class="panel-list" style="background-color: whitesmoke;">
    <div style='position: relative;'>
      <h2 class="panel-form__title" style="margin-top: 10px;"><%= @title_card %></h2>

      <% 
        if request.referrer == request.original_url or request.referrer == nil
          url = clients_path
        else
          url = request.referrer
        end
      %>

      <a href="<%= url %>" class="btn-back new-btn">
        <ion-icon name="arrow-back" role="img" class="hydrated" aria-label="arrow back"></ion-icon>
      </a>
      <%= form.submit form_submit, class: "btn", style: 'float: right;
      position: absolute;
      right: 10px;
      top: 0;
      padding: 15px;
      color: #12ce88;' %>
    </div>
    <div class="container-list gray-scrollbar">
      <div class="conten-card">
        <div class="information-section">
          <div class="block-information">
            <div id="drop_zone" class="add-avatar">
              <div class="icon-add-avatar">
                <input id="client_avatar" type="file" style="display: none;">
                <%=form.hidden_field :avatar, id: 'client_avatar_field', value: client.avatar%>
              </div>
              <%= image_tag s3_image(client.avatar), class: 'people-avatar' %>
            </div>
            <div class="finput">
              <%= form.label 'Фамилия', class: 'finput-label' %>
              <%= form.text_field :last_name, id: :client_last_name, class: 'finput-input' %>
            </div>
            <div class="finput">
              <%= form.label 'Имя', class: 'finput-label' %>
              <%= form.text_field :first_name, id: :client_first_name, class: 'finput-input' %>
            </div>
            <div class="finput">
              <%= form.label 'Отчество', class: 'finput-label' %>
              <%= form.text_field :patronymic, id: :client_patronymic, class: 'finput-input' %>
            </div>
          </div>

          <div class="block-information">
            <div class="finput">
              <%= form.label 'Дата рождения', class: 'finput-label' %>
              <%= form.date_field :birthday, id: :client_birthday, class: 'finput-input' %>
            </div>
            <div class="finput">
              <%= form.label 'Пол', class: 'finput-label' %>
              <%= form.select :sex, options_for_sexes, {selected: client.sex}, {class: 'finput-input'} %>
            </div>
            <div class="finput">
              <%= form.label 'Телефон', class: 'finput-label' %>
              <%= form.telephone_field :phone_number, id: :client_phone_number, class: "finput-input" %>
            </div>
          </div>

          <div class="block-information">
            <h3>Аккаунт</h3>
            <div class="container-info compact">
              <dfn data-info="Указав почту, будет создан аккаунт или у уже имеющегося появится доступ к информации этой карты">
                <div class="finput">
                  <%= form.label 'Почта', class: 'finput-label' %>
                  <%= form.email_field :email, class: "finput-input ajax", value:
                  email_user(@client.user_id) %>
                </div>
              </dfn>
              <div class="get_account"></div>
            </div>
          </div>

          <script type="text/javascript">
            document.addEventListener('turbolinks:load', function() {

              function funcBefore() {
                $('.get_account').html('<div class="loading-block"><img src="/images/loading.gif"</div>');
              }
              function funcSuccess(data) {
                $('.get_account').html(data);
              }

              var lastId = null;
              $('.ajax').on("input", function(){
                var textSearch = this.value.trim();
                clearTimeout(lastId)

                if(textSearch === "") {
                  $('.get_account').html('');
                }
                else {
                  funcBefore()
                  lastId = setTimeout(() => {
                    $.ajax( {
                      url: '/account',
                      method: 'GET',
                      data: {
                        request: textSearch
                      },
                      dataType: 'HTML',
                      // beforeSend: funcBefore,
                      success: funcSuccess
                    });
                  }, 500)
                }
              });
            });
          </script>

          <% if @blocks_clients.present? %>
            <% i = 0 %>
            <% @blocks_clients.each do |b| %>
              <% fields_templates = @field_templates_clients.where(info_block_id: b.id) %>
              <% if fields_templates.present? %>
                <div class="block-information">
                  <h3><%= b.name %></h3>
                  <div class="container-info compact">
                    <% fields_templates.each do |ft| %>

                      <% f = @client.field_data.find_by(field_id: ft.id) %>

                      <input value="<%= ft.id %>" type="hidden" name="client[field_data_attributes][<%= i %>][field_id]" id="client_field_data_attributes_0_field_id">

                      <div class="finput">
                        <%= form.label ft.name, class: 'finput-label' %>
                        <% if ft.field_type == 'text' %>
                          <input value="<%=f.nil? ? '' : f.value %>" name="client[field_data_attributes][<%= i %>][value]" type="text" class="finput-input" />
                        <% elsif ft.field_type == 'date' %>
                          <input value="<%=f.nil? ? '' : f.value %>" name="client[field_data_attributes][<%= i %>][value]" type="date" class="finput-input" />
                        <% elsif ft.field_type == 'number' %>
                          <input value="<%=f.nil? ? '' : f.value %>" name="client[field_data_attributes][<%= i %>][value]" type="number" class="finput-input" />
                        <% elsif ft.field_type == 'datetime' %>
                          <input value="<%=f.nil? ? '' : f.value %>" name="client[field_data_attributes][<%= i %>][value]" type="datetime" class="finput-input" />
                        <% end %>
                      </div>
                      <% i = i + 1 %>
                    <%end%>
                  </div>
                </div>
              <%end%>
            <%end%>
          <%end%>
        </div>
        <% form.submit @form_submit, class: "btn", style: 'color: #12ce88;' %>
      </div>

      <% if client.errors.any? %>
        <div id="error_explanation" class="message">
          <h2><%= pluralize(client.errors.count, "error") %> prohibited this client from being saved:</h2>

          <ul>
          <% client.errors.full_messages.each do |message| %>
            <li><%= message %></li>
          <% end %>
          </ul>
        </div>
      <% end %>
    </div>
  </div>
<% end %>

    <script>
      if (!FileList.prototype.slice)  // firefox
        FileList.prototype.slice = Array.prototype.slice
      var form = document.getElementById('main-form')
      var data = JSON.parse(form.dataset.formData)
      var clientAvatarField = document.getElementById('client_avatar_field')
      var clientAvatar = $("#client_avatar")
      var result = clientAvatar.withDropZone('#drop_zone', {
        url: form.dataset.url,
        autoUpload: true,
        formData: (index, blob, filename)=> {
          formData = new FormData
          for (var i in data)
              formData.set(i, data[i])
          formData.set('file', blob, filename)
          return formData
        },
        action: {
          name: "image",
          params: {
            preview: true,
          }
        },
        done(filenames) {
          var fn = filenames.map(filename => eval('`' + data.key + '`'))[0];
          clientAvatarField.value = fn
          console.log(fn)
        }
      })
      clientAvatar.on('change', () => clientAvatarField.value = '')
    </script>

    <script type="text/javascript">
      // References to all the element we will need.
      var video = document.querySelector('#camera-stream'),
          start_camera = document.querySelector('#btn-camera-on'),
          image = document.querySelector('#snap'),
          controls = document.querySelector('.controls'),
          take_photo_btn = document.querySelector('#take-photo'),
          delete_photo_btn = document.querySelector('#delete-photo'),
          download_photo_btn = document.querySelector('#download-photo'),
          error_message = document.querySelector('#error-message');

      // The getUserMedia interface is used for handling camera input.
      // Some browsers need a prefix so here we're covering all the options
      navigator.getMedia = ( navigator.getUserMedia ||
      navigator.webkitGetUserMedia ||
      navigator.mozGetUserMedia ||
      navigator.msGetUserMedia);


      start_camera.addEventListener("click", function(e) {
        $('.camera-cont').show();
        if(!navigator.getMedia) {
            displayErrorMessage("Your browser doesn't have support for the navigator.getUserMedia interface.");
        }
        else {
          navigator.getUserMedia(
            // Настройки
            {
                video: true,
                audio: false
            },
            // Колбэк для успешной операции
            function(stream){

                // Создаём объект для видео потока и
                // запускаем его в HTLM элементе video.
                video.src = window.URL.createObjectURL(stream);
                localstream = stream;

                // Воспроизводим видео.
                video.play();

            },
            // Колбэк для не успешной операции
            function(err){

                // Наиболее частые ошибки — PermissionDenied и DevicesNotFound.
                console.error(err);

            }
          );
        }
      });


      take_photo_btn.addEventListener("click", function(e){

        e.preventDefault();
    $('#drop_zone').addClass('drop');
              $('#drop_zone').html('<div class="icon-add-avatar"><input id="client_avatar" type="file" style="display: none;"><input id="client_avatar_field" value="" type="hidden" name="client[avatar]"></div><img class="people-avatar" src="https://tbis-uploads.s3.amazonaws.com/images/687f374e-f900-4fbd-95d2-9be468ac3930/l-huile-de-lavande-la-vraie-solution-anti-poux-10779576wmuiv.jpg"><div class="preview-container"><div class="wrapper"><div class="preview"><canvas id="canvas-id" width="730" height="487"></canvas></div><div class="file-name">Depositphotos_44494081_l-2015-730x487.jpg</div><div class="file-uploader-progress-bar"><div class="progress" style="width: 100%;"></div></div></div></div>');
        var snap = takeSnapshot();

        // Show image. 
        image.setAttribute('src', snap);

        document.querySelector('#client_avatar_field').value = imageDataURL;

        console.log(snap);
        image.classList.add("visible");

        // Enable delete and save buttons
        delete_photo_btn.classList.remove("disabled");
        download_photo_btn.classList.remove("disabled");

        // Set the href attribute of the download button to the snap url.
        download_photo_btn.href = snap;

        // Pause video playback of stream.
        video.pause();


      });


      delete_photo_btn.addEventListener("click", function(e){

        e.preventDefault();

        // Hide image.
        image.setAttribute('src', "");
        image.classList.remove("visible");

        // Disable delete and save buttons
        delete_photo_btn.classList.add("disabled");
        download_photo_btn.classList.add("disabled");

        // Resume playback of stream.
        video.play();

      });


      


      function takeSnapshot(){
        // Here we're using a trick that involves a hidden canvas element.  

        var hidden_canvas = document.querySelector('#canvas-id'),
            context = hidden_canvas.getContext('2d');

        var width = video.videoWidth,
            height = video.videoHeight;

        if (width && height) {

            // Setup a canvas with the same dimensions as the video.
            hidden_canvas.width = width;
            hidden_canvas.height = height;

            // Make a copy of the current frame in the video on the canvas.
            context.drawImage(video, 0, 0, width, height);

            // Turn the canvas image into a dataURL that can be used as a src for our photo.
            return hidden_canvas.toDataURL('image/png');
        }


      }


      function displayErrorMessage(error_msg, error){
        error = error || "";
        if(error){
            console.error(error);
        }

        error_message.innerText = error_msg;

        hideUI();
        error_message.classList.add("visible");
      }

     
      function hideUI(){
        // Helper function for clearing the app UI.

        controls.classList.remove("visible");
        start_camera.classList.remove("visible");
        video.classList.remove("visible");
        snap.classList.remove("visible");
        error_message.classList.remove("visible");
      }
        
        
      function videoOff() {
        //clearInterval(theDrawLoop);
        //ExtensionData.vidStatus = 'off';
        $('.camera-cont').hide();
        video.pause();
        video.src = "";
        localstream.getTracks()[0].stop();
      }

    </script>